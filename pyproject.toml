# python.org/dev/peps/pep-0621
# packaging.python.org/en/latest/specifications/pyproject-toml
# setuptools.pypa.io/en/latest/userguide/pyproject_config.html


[project]
name = 'Art-of-Geometry'

keywords = [
  'Mathematics',
  'Maths',
  'Math',

  'Geometry',
  'geom',

  'art',
]

readme = {file = 'README.md', content-type = 'text/markdown', charset = 'UTF-8'}

license = {file = 'LICENSE'}

authors = [
  {name = 'The Vinh LUONG (LƯƠNG Thế Vinh)', email = 'TheVinhLuong@gmail.com'},
]
maintainers = [
  {name = 'The Vinh LUONG (LƯƠNG Thế Vinh)', email = 'TheVinhLuong@gmail.com'},
]

requires-python = '>= 3.13'


dynamic = [
  'version',

  'description',

  'classifiers',

  'dependencies',
  'optional-dependencies',

  'entry-points',
  'scripts',
  'gui-scripts',
]


[project.urls]
Homepage = 'https://GitHub.com/Mathverse/Art-of-Geometry'
Repository = 'https://GitHub.com/Mathverse/Art-of-Geometry'
GitHub = 'https://GitHub.com/Mathverse/Art-of-Geometry'
Documentation = 'https://Mathverse.GitHub.io/Art-of-Geometry'


[tool.setuptools]
# setuptools.pypa.io/en/latest/userguide/pyproject_config.html#setuptools-specific-configuration

# platforms = []  # array

zip-safe = true

# eager-resources = []  # array

py-modules = []

# packages = []  # array or find directive

# package-dir = {}  # table/inline-table, used when explicitly listing packages

# namespace-packages = []  # array, deprecated

package-data = {}  # table/inline-table

include-package-data = true

exclude-package-data = {}  # table/inline-table

license-files = ['LICEN[CS]E*']  # array of glob patterns

data-files = {}  # table/inline-table, discouraged

# script-files = []  # array, deprecated

provides = []  # array, ignored by pip

obsoletes = []  # array, ignored by pip


[tool.setuptools.packages.find]
where = ['src']
include = ['*']
exclude = []
namespaces = true


[tool.setuptools.dynamic]
version = {file = 'metadata/version'}

description = {file = 'metadata/description'}

classifiers = {file = 'metadata/classifiers'}

dependencies = {file = 'metadata/requirements/base.txt'}

entry-points = {file = 'metadata/entry-points'}


[tool.setuptools.dynamic.optional-dependencies]
build = {file = 'metadata/requirements/build.txt'}
dev = {file = 'metadata/requirements/dev.txt'}
doc = {file = 'metadata/requirements/doc.txt'}
manim = {file = 'metadata/requirements/manim.txt'}
jupyter = {file = 'metadata/requirements/jupyter.txt'}
lint = {file = 'metadata/requirements/lint.txt'}
publish = {file = 'metadata/requirements/publish.txt'}
test = {file = 'metadata/requirements/test.txt'}
viz = {file = 'metadata/requirements/viz.txt'}


[build-system]
requires = [
  'SetUpTools >= 75.6.0',
  'Wheel >= 0.45.1',
]
build-backend = 'setuptools.build_meta'


[tool.pylint]
disable = [
  'relative-beyond-top-level',
]

# docs.astral.sh/ruff/configuration
[tool.ruff]

# Exclude a variety of commonly ignored directories.
exclude = [
]

# Same as Black.
line-length = 79
indent-width = 4

target-version = 'py313'

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ['E4', 'E7', 'E9', 'F']
ignore = [
  # TODO: update
  'E402',  # module level import not at top of file
  'F401',  # imported but unused
  'F841',  # local variable is assigned to but never used

  'B019',  # use of `functools.lru_cache` or `functools.cache` on methods can lead to memory leaks
  'EXE002',  # the file is executable but no shebang is present
  'I001',  # import block is un-sorted or un-formatted
  'INP001',  # file is part of an implicit namespace package; add an `__init__.py`
  'Q000',  # single quotes found but double quotes preferred
  'RUF022',  # `__all__` is not sorted
  'S101',  # use of `assert` detected
  'TID252',  # prefer absolute imports over relative imports from parent modules
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ['ALL']
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = '^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$'

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = 'double'

# Like Black, indent with spaces, rather than tabs.
indent-style = 'space'

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = 'auto'

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = 'dynamic'


# docs.pytest.org/en/latest/reference/reference.html#configuration-options
# docs.pytest.org/en/latest/reference/reference.html#ini-options-ref
[tool.pytest.ini_options]

# docs.pytest.org/en/latest/reference/reference.html#confval-addopts
addopts = [
  '--import-mode=importlib',
]

# docs.pytest.org/en/latest/explanation/goodpractices.html#conventions-for-python-test-discovery
# docs.pytest.org/en/latest/example/pythoncollection.html

# docs.pytest.org/en/latest/reference/reference.html#confval-python_files
python_files = [
  '*.py',
]
# docs.pytest.org/en/latest/reference/reference.html#confval-python_classes
python_classes = [
  'Check*', '*Check',
  'Test*', '*Test',
]
# docs.pytest.org/en/latest/reference/reference.html#confval-python_functions
python_functions = [
  'check_*', '*_check',
  'test_*', '*_test',
]

# docs.pytest.org/en/latest/reference/reference.html#confval-testpaths
testpaths = [
  'test',
]
